{"version":3,"sources":["components/Viewer.js","selectors/ParseExpressions.js","actions/index.js","actions/types.js","components/Editor.js","components/App.js","serviceWorker.js","reducers/CodeReducer.js","reducers/index.js","index.js"],"names":["Viewer","expressions","formattedExpressions","_","mapValues","expression","result","eval","type","isFunction","name","isBoolean","isObject","isArray","JSON","stringify","map","index","key","code","this","evaluateExpressions","defaultHeight","window","innerHeight","split","defaultSize","className","renderExpressions","props","errors","Component","mapStateToProps","state","ParseExpressions","e","toString","connect","codeSelector","OPEN_DELIMITERS","CLOSE_DELIMITERS","DELIMITER_MAP","findDelimiters","lineContents","column","intersection","takeRight","length","parseExpressions","transformedCode","transform","presets","codeByLine","tokenized","tokenize","loc","parens","wasOpen","exp","reduce","value","end","lineNumber","line","lineHasMoreDelimiters","includes","every","count","take","join","createSelector","updateCode","console","clear","payload","Editor","onCodeChange","codeChanged","onChange","options","mode","lineNumbers","tabSize","actions","App","width","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","error","rootReducer","combineReducers","action","store","createStore","reducers","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"syCAMMA,O,qwBACgBC,aAClB,IAAMC,qBAAuBC,8CAAEC,UAAUH,aAAa,SAAAI,YACpD,IAAMC,OAASC,KAAKF,YACpB,OAAIC,QAAUA,OAAOE,KACZF,OACEH,8CAAEM,WAAWH,SAAWA,OAAOI,KACjC,gFAAaJ,OAAOI,MAClBP,8CAAEQ,UAAUL,QACdA,OAAS,OAAS,QAChBH,8CAAES,SAASN,SAAWH,8CAAEU,QAAQP,QAClCQ,KAAKC,UAAUT,QAEjBA,UAET,OAAOH,8CAAEa,IAAId,sBAAsB,SAACG,EAAYY,GAC9C,OAAO,kEAAKC,IAAKD,GAAQZ,Q,wCAIXc,GAChB,OAAOC,KAAKC,oBAAoBF,K,+BAIhC,IAAMG,EAAgBC,OAAOC,YAAc,IAE3C,OACE,2DAAC,gDAAD,CACEC,MAAM,aACNC,YAAaJ,EACbK,UAAU,UAEV,kEAAKA,UAAU,UACZP,KAAKQ,kBAAkBR,KAAKS,MAAM5B,cAErC,kEAAK0B,UAAU,UAAUP,KAAKS,MAAMC,a,QApCvBC,8CA0CfC,gBAAkB,SAAAC,GACtB,IAAIhC,EAAa6B,EAEjB,IACE7B,EAAciC,mEAAiBD,GAC/B,MAAOE,GACPL,EAASK,EAAEC,WAGb,MAAO,CAAEnC,cAAa6B,WAGTO,yEAAQL,gBAARK,CAAyBrC,S,yEC5DxC,2kBAKMsC,aAAe,SAAAL,GAAK,OAAIA,EAAMd,MAC9BoB,gBAAkB,CAAC,IAAK,IAAK,IAAK,KAClCC,iBAAmB,CAAC,IAAK,IAAK,IAAK,KACnCC,cAAgB,CACpB,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAGDC,eAAiB,SAAC,EAAYC,GAAb,IAAGC,EAAH,EAAGA,OAAH,OACrBzC,8CAAE0C,aACA1C,8CAAE2C,UAAUH,EAAcA,EAAaI,OAASH,GAChDL,iBACAQ,QAEEC,iBAAmB,SAAnBA,iBAAmB7B,MACvB,IAAM8B,gBAAkBC,gEAAU/B,KAAM,CAAEgC,QAAS,CAAC,WAAYhC,KAC1DiC,WAAaH,gBAAgBxB,MAAM,MACnC4B,UAAYC,sDAASL,gBAAiB,CAAEM,KAAK,IAE7CC,OAAS,CAAE,IAAK,EAAG,IAAK,EAAG,IAAK,GAClCC,SAAU,EACRC,IAAMvD,8CAAEwD,OACZN,WACA,SAACpD,EAAD,GAA2C,IAA3B2D,EAA0B,EAA1BA,MAAcC,EAAY,EAAnBN,IAAOM,IACtBC,EAAaD,EAAIE,KACjBpB,EAAeS,WAAWU,EAAa,GACvCE,EAAwBtB,eAAemB,EAAKlB,GAElD,OAAI1C,EAAY6D,GACP7D,GAGLsC,gBAAgB0B,SAASL,KAC3BJ,OAAOI,IAAU,EACjBH,SAAU,GAGRjB,iBAAiByB,SAASL,KAC5BJ,OAAOf,cAAcmB,KAAW,IAI/BI,GACDP,SACAtD,8CAAE+D,MAAMV,QAAQ,SAAAW,GAAK,OAAc,IAAVA,MAEzBV,SAAU,EACVxD,EAAY6D,GAAc3D,8CAAEiE,KAAKhB,WAAYU,GAAYO,KAAK,MAEvDpE,IAGJ+D,GAAyB7D,8CAAE+D,MAAMV,QAAQ,SAAAW,GAAK,OAAc,IAAVA,MACrDlE,EAAY6D,GAAc3D,8CAAEiE,KAAKhB,WAAYU,GAAYO,KAAK,MAEvDpE,GAGFA,KAET,IAIF,OADAM,KAAK0C,iBACES,KAGMY,sEAAehC,aAAcU,mB,qQCxE/BuB,G,MAAa,SAAApD,GAExB,OADAqD,QAAQC,QACD,CACLjE,KCL2B,kBDM3BkE,QAASvD,K,OEAPwD,E,2MACJC,aAAe,SAAAC,GACb,EAAKhD,MAAM0C,WAAWM,I,wEAItB,OACE,yBAAKlD,UAAU,UACb,kBAAC,IAAD,CACEiC,MAAOxC,KAAKS,MAAMV,KAClB2D,SAAU1D,KAAKwD,aACfG,QAAS,CAAEC,KAAM,MAAOC,aAAa,EAAMC,QAAS,U,GAXzCnD,aAsBNM,eAJS,SAAAJ,GACtB,MAAO,CAAEd,KAAMc,EAAMd,QAGiBgE,EAAzB9C,CAAkCsC,G,QCXlCS,E,iLAVX,IAAMC,EAAQ9D,OAAOC,YACrB,OACE,kBAAC,IAAD,CAAWC,MAAM,WAAWC,YAAa2D,GACvC,kBAAC,EAAD,MACA,kBAACrF,EAAA,EAAD,W,GANU+B,a,OCOZuD,EAAcC,QACW,cAA7BhE,OAAOiE,SAASC,UAEe,UAA7BlE,OAAOiE,SAASC,UAEhBlE,OAAOiE,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnE,QACf6D,UAAUC,cAAcQ,YAI1B/B,QAAQgC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB1B,QAAQgC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACLpC,QAAQoC,MAAM,4CAA6CA,MC9FjE,ICIeC,EAJKC,YAAgB,CAClC3F,KDCa,WAAoC,IAAnCc,EAAkC,uDAF5B,GAEiB8E,EAAW,uCAChD,OAAQA,EAAOvG,MACb,IJN2B,kBIOzB,OAAOuG,EAAOrC,QAChB,QACE,OAAOzC,MEAP+E,EAAQC,YAAYC,GAE1BC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SHOnB,SAAkBzB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIyB,IAAIC,MAAwBjG,OAAOiE,SAASiC,MACpDC,SAAWnG,OAAOiE,SAASkC,OAIvC,OAGFnG,OAAOoG,iBAAiB,QAAQ,WAC9B,IAAM/B,EAAK,UAAM4B,MAAN,sBAEPlC,IAgEV,SAAiCM,EAAOC,GAEtC+B,MAAMhC,EAAO,CACXiC,QAAS,CAAE,iBAAkB,YAE5B5B,MAAK,SAAA6B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CpC,UAAUC,cAAcoC,MAAMlC,MAAK,SAAAC,GACjCA,EAAakC,aAAanC,MAAK,WAC7B1E,OAAOiE,SAAS6C,eAKpB1C,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLnC,QAAQgC,IACN,oEAvFA8B,CAAwB1C,EAAOC,GAI/BC,UAAUC,cAAcoC,MAAMlC,MAAK,WACjCzB,QAAQgC,IACN,iHAMJb,EAAgBC,EAAOC,OGhC/BE,K","file":"static/js/main.9bb676a6.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport ParseExpressions from \"../selectors/ParseExpressions\";\nimport SplitPane from \"react-split-pane\";\n\nclass Viewer extends Component {\n  evaluateExpressions(expressions) {\n    const formattedExpressions = _.mapValues(expressions, expression => {\n      const result = eval(expression);\n      if (result && result.type) {\n        return result;\n      } else if (_.isFunction(result) && result.name) {\n        return <i>Function {result.name}</i>;\n      } else if (_.isBoolean(result)) {\n        return result ? \"True\" : \"False\";\n      } else if (_.isObject(result) || _.isArray(result)) {\n        return JSON.stringify(result);\n      }\n      return result;\n    });\n    return _.map(formattedExpressions, (expression, index) => {\n      return <div key={index}>{expression}</div>;\n    });\n  }\n\n  renderExpressions(code) {\n    return this.evaluateExpressions(code);\n  }\n\n  render() {\n    const defaultHeight = window.innerHeight / 1.3;\n\n    return (\n      <SplitPane\n        split=\"horizontal\"\n        defaultSize={defaultHeight}\n        className=\"viewer\"\n      >\n        <div className=\"result\">\n          {this.renderExpressions(this.props.expressions)}\n        </div>\n        <div className=\"errors\">{this.props.errors}</div>\n      </SplitPane>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  let expressions, errors;\n\n  try {\n    expressions = ParseExpressions(state);\n  } catch (e) {\n    errors = e.toString();\n  }\n\n  return { expressions, errors };\n};\n\nexport default connect(mapStateToProps)(Viewer);\n","import _ from \"lodash\";\nimport { createSelector } from \"reselect\";\nimport { transform } from \"babel-standalone\";\nimport { tokenize } from \"esprima\";\n\nconst codeSelector = state => state.code;\nconst OPEN_DELIMITERS = [\"(\", \"{\", \"[\", \"`\"];\nconst CLOSE_DELIMITERS = [\")\", \"}\", \"]\", \"`\"];\nconst DELIMITER_MAP = {\n  \")\": \"(\",\n  \"}\": \"{\",\n  \"]\": \"[\",\n  \"`\": \"`\"\n};\n\nconst findDelimiters = ({ column }, lineContents) =>\n  _.intersection(\n    _.takeRight(lineContents, lineContents.length - column),\n    OPEN_DELIMITERS\n  ).length;\n\nconst parseExpressions = code => {\n  const transformedCode = transform(code, { presets: [\"react\"] }).code;\n  const codeByLine = transformedCode.split(\"\\n\");\n  const tokenized = tokenize(transformedCode, { loc: true });\n\n  const parens = { \"(\": 0, \"{\": 0, \"[\": 0 };\n  let wasOpen = false;\n  const exp = _.reduce(\n    tokenized,\n    (expressions, { value, loc: { end } }) => {\n      const lineNumber = end.line;\n      const lineContents = codeByLine[lineNumber - 1];\n      const lineHasMoreDelimiters = findDelimiters(end, lineContents);\n\n      if (expressions[lineNumber]) {\n        return expressions;\n      }\n\n      if (OPEN_DELIMITERS.includes(value)) {\n        parens[value] += 1;\n        wasOpen = true;\n      }\n\n      if (CLOSE_DELIMITERS.includes(value)) {\n        parens[DELIMITER_MAP[value]] -= 1;\n      }\n\n      if (\n        !lineHasMoreDelimiters &&\n        wasOpen &&\n        _.every(parens, count => count === 0)\n      ) {\n        wasOpen = false;\n        expressions[lineNumber] = _.take(codeByLine, lineNumber).join(\"\\n\");\n\n        return expressions;\n      }\n\n      if (!lineHasMoreDelimiters && _.every(parens, count => count === 0)) {\n        expressions[lineNumber] = _.take(codeByLine, lineNumber).join(\"\\n\");\n\n        return expressions;\n      }\n\n      return expressions;\n    },\n    {}\n  );\n\n  eval(transformedCode);\n  return exp;\n};\n\nexport default createSelector(codeSelector, parseExpressions);\n","import { DID_UPDATE_CODE } from \"./types\";\r\n\r\nexport const updateCode = code => {\r\n  console.clear();\r\n  return {\r\n    type: DID_UPDATE_CODE,\r\n    payload: code\r\n  };\r\n};\r\n","export const DID_UPDATE_CODE = \"did_update_code\";\r\n","import React, { Component } from \"react\";\nimport CodeMirror from \"react-codemirror\";\nimport \"codemirror/mode/jsx/jsx\";\nimport * as actions from \"../actions\";\nimport { connect } from \"react-redux\";\n\nclass Editor extends Component {\n  onCodeChange = codeChanged => {\n    this.props.updateCode(codeChanged);\n  };\n\n  render() {\n    return (\n      <div className=\"editor\">\n        <CodeMirror\n          value={this.props.code}\n          onChange={this.onCodeChange}\n          options={{ mode: \"jsx\", lineNumbers: true, tabSize: 2 }}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { code: state.code };\n};\n\nexport default connect(mapStateToProps, actions)(Editor);\n","import React, { Component } from \"react\";\nimport SplitPane from \"react-split-pane\";\nimport Editor from \"./Editor\";\nimport Viewer from \"./Viewer\";\n\nclass App extends Component {\n  render() {\n    const width = window.innerHeight;\n    return (\n      <SplitPane split=\"vertical\" defaultSize={width}>\n        <Editor />\n        <Viewer />\n      </SplitPane>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { DID_UPDATE_CODE } from \"../actions/types\";\r\n\r\nconst INITIAL_STATE = \"\";\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case DID_UPDATE_CODE:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport codeReducer from \"./CodeReducer\";\r\nconst rootReducer = combineReducers({\r\n  code: codeReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducers from \"./reducers\";\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}